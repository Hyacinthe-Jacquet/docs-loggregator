---
title: Pivotal Platform Observability Fabric (Beta)
owner: Log Egress, Metric Egress
---

This topic describes the components of <%= vars.platform_name %> Observability Fabric (Beta).

## <a id="overview"></a> Overview

<%= vars.platform_name %> Observability Fabric (Beta) is a group of components that allow you to access all the same logs and metrics that you can access through the Loggregator system. The components of Observability Fabric use a shared-nothing architecture that requires several fewer VMs than the Loggregator system. 

Observability Fabric includes components that collect, store, and forward logs and metrics in your <%= vars.platform_name %> deployment.  

For more information about the components of Loggregator, see [Loggregator Architecture](architecture.html).

## <a id="metric-egress"></a> Metric Components

This section describes the components of Observability Fabric that allow you to access metrics for your foundation. 

These components allow you to access the same metrics available through the Loggregator Firehose with a pull-based architecture. The Loggregator system uses a push-based model for forwarding metrics, in which all data is sent though the Firehose.  

The following Observability Fabric components enable pull-based access to metrics:

* **Metrics Agent**: The Metrics Agent collects Loggregator V2 envelopes and makes them available on a Prometheus endpoint. The Metrics Agent performs a similar function to the Loggregator Agent in the Loggregator system. 

* **Service Metrics Agent**: The Service Metrics Agent receives metrics from service instances on your <%= vars.platform_name %> deployment and makes them available on a Prometheus endpoint. 

* **Metrics Discovery Registrar**: The Metrics Discovery Registrar publishes the location of the Prometheus endpoint defined by the Metrics Agent and Service Metrics Agent to NATs. This is helpful for configuring automation to scrape metric data from the endpoint. For more information about automating metric scraping, see [Telegraf Reference Architecture (Beta)](#telegraf-reference-architecture).

## <a id="log-egress"></a> Log Components

This section describes the Observability Fabric components that allow you to access logs on your foundation. 

These components are also a part of the Loggregator system. For more information about how these components function as part of the Loggregator system, see [Loggregator Architecture](architecture.html). 

The following Observability Fabric components enable access to logs:

* **Syslog Agent**:<%= partial 'syslog_agents' %>

* **Aggregate Syslog Drain**: The aggregate syslog drain feature allows you to configure all Syslog Agents on your deployment to send logs to a single destination. You can use the aggregate syslog drain feature rather than the Loggregator Firehose to forward all logs for your deployment. 

* **Log Cache**: <%= partial 'log_cache' %>

## <a id="reference-architecture"></a> Observability Fabric Reference Architectures

This section includes sample reference architectures for using Observability Fabric with Telegraf or Prometheus to export logs and metrics from <%= vars.platform_name %> to an external source. 

These reference architectures allow you to use external tools to better manage how Observability Fabric components collect and forward logs and metrics. 

### <a id="telegraf-reference-architecture"></a> Telegraf Reference Architecture (Beta)

You can deploy Telegraf with Observability Fabric to use push-based metrics collection formats. 

`cf-telegraf-operator` deploys Telegraf and a sidecar that manages the scrape configuration. 

For more information, see [cf-telegraf-operator](https://github.com/cloudfoundry-incubator/cf-telegraf-operator) on GitHub.

### <a id="prometheus-reference-architecture"></a> Prometheus Reference Architecture (Beta)

You can use Prometheus with Observability Fabric to enable networking and encrypt metric transport with security groups and certificates from Credhub. 

For more information, see [cf-prometheus-operator](https://github.com/cloudfoundry-incubator/cf-prometheus-operator) on GitHub.
