---
title: Loggregator Guide for Cloud Foundry Operators
owner: Logging and Metrics
---

<% current_page.data.title = "Loggregator Guide for " + vars.app_runtime_abbr + " Operators" %>

This topic contains information for <%= vars.app_runtime_full %> (<%= vars.app_runtime_abbr %>) deployments operators about how to configure the Loggregator system to avoid data loss with high volumes of logging and metrics data.

For more information about the Loggregator system, see [Loggregator Architecture](./architecture.html).


## <a id='throughput-reliability'></a> Loggregator Message Throughput and Reliability

You can measure both the message throughput and message reliability rates of your Loggregator system.

### <a id='throughput-rate'></a> Measuring Message Throughput

To measure the message throughput of the Loggregator system, you can monitor the total number of egress messages from all Metrons on your platform using the `metron.egress` metric.

If you do not use a monitoring platform, you can measure the overall message throughput of your Loggregator system. To measure the overall message throughput:

1. Log in to the Cloud Foundry Command Line Interface (cf CLI) with your admin credentials by running:

	```
	cf login
	```

1. Install the <%= vars.app_runtime_abbr %> Firehose plugin. For more information, see the [Install the Plugin](cli-plugin.html#add) section of the _Installing the Loggregator Firehose Plugin for cf CLI_ topic.

1. Install Pipe Viewer by running:

	```
	apt-get install pv
	```

1. Run:

	```
	cf nozzle -n | pv -l -i 10 -r > /dev/null
	```

### <a id='reliability-rate'></a> Measuring Message Reliability

To measure the message reliability rate of your Loggregator system, you can run black-box tests. If you want to use this method, see the open-source [cf-logmon](https://github.com/cloudfoundry-incubator/cf-logmon) app and the configuration instructions provided in the README.md file.


## <a id='scaling'></a> Scaling Loggregator

<% if not vars.platform_code == 'CF' %>

Most Loggregator configurations use preferred resource defaults. For more information about customizing these defaults and planning the capacity of your Loggregator system, see [Key Capacity Scaling Indicators](<%= vars.url_path %>/monitoring/key-cap-scaling.html).

<% else %>

Most Loggregator configurations are set to use preferred resource defaults. If you want to customize these defaults or plan the capacity of your Loggregator system, see the formulas below.

### <a id='doppler'></a> Doppler

Doppler resources can require scaling to accommodate your overall log and metric volume. The recommended formula for determining the number of Doppler instances you need to achieve a loss rate of < 1% is:

<p class="tip"><em>Number of Doppler instances = Number of envelopes per second / 16,000</em></p>

Because it can be challenging to understand the ratio of metrics to logs, it is also recommended to monitor and scale Doppler based on its ingress traffic. To do this, you must sum two metrics and rate them per second:

<p class="tip"><em>Number of Doppler instances = `doppler.ingress` / 16,000</em></p>

Using maximum values over a two-week period is a recommended approach for ingress-based capacity planning.

### <a id='traffic-controller'></a> Traffic Controller

Traffic Controller resources are usually scaled in line with Doppler resources. The recommended formula for determining the number of Traffic Controller instances is:

<p class="tip"><em>Number of Traffic Controller instances = Number of Doppler instances / 4</em></p>

In addition, Traffic Controller resources can require scaling to accommodate the number of your log streams and Firehose subscriptions.

For more information about scaling the Loggregator system, see the [Scaling Loggregator](../running/managing-cf/logging-config.html#scaling) section of the _Configuring System Logging_ topic.

<% end %>


## <a id='scaling-nozzles'></a> Scaling Nozzles

Nozzles are programs that consume data from the Loggregator Firehose. Nozzles can be configured to select, buffer, and transform data, and to forward it to other apps and services. You can scale a nozzle using the subscription ID specified when the nozzle connects to the Firehose. If you use the same subscription ID on each nozzle instance, the Firehose evenly distributes data across all instances of the nozzle.

For example, if you have two nozzle instances with the same subscription ID, the Firehose sends half of the data to one nozzle instance and half to the other. Similarly, if you have three nozzle instances with the same subscription ID, the Firehose sends one-third of the data to each instance.

If you want to scale a nozzle, the number of nozzle instances should match the number of Traffic Controller instances:

<p class="tip"><em>Number of nozzle instances = Number of Traffic Controller instances</em></p>

Stateless nozzles should handle scaling gracefully. If a nozzle buffers or caches the data, the nozzle author must test the results of scaling the number of nozzle instances up or down.


## <a id='slow-noz'></a> Slow Nozzle Alerts

The [Traffic Controller](./architecture.html#traffic-controller) alerts nozzles if they consume events too slowly.
If a nozzle falls behind, Loggregator alerts the nozzle in two ways:

* **TruncatingBuffer** alerts: If the nozzle consumes messages more slowly than they are produced, the Loggregator system may drop messages. In this case, Loggregator sends the log message, `TB: Output channel too full. Dropped N messages`, where `N` is the number of dropped messages.

* **CounterEvent**: Loggregator also emits a **CounterEvent** with the name `doppler_proxy.slow_consumer`. The nozzle receives both messages from the Firehose, alerting the operator to the performance issue.

For more information about the Traffic Controller, see the [Loggregator Architecture](./architecture.html#loggregator-architecture) section of the _Loggregator Architecture_ topic.


## <a id='syslog-forward'></a> Forwarding Logs to an External Service

You can configure <%= vars.app_runtime_abbr %> to forward log data from apps to an external aggregator service. For information about how to bind apps to the external service and configure it to receive logs from <%= vars.app_runtime_abbr %>, see [Streaming App Logs to Log Management Services](../devguide/services/log-management.html).


## <a id='log-message-size'></a> Log Message Size Constraints

When a Diego Cell emits app logs to Metron, Diego breaks up log messages greater than approximately 60&nbsp;KiB into multiple envelopes.
